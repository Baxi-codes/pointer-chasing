/*
MIT License
Copyright 2020 Jee W. Choi, Marat Dukhan, and Xing Liu
Permission is hereby granted, free of charge, to any person obtaining a copy of 
this software and associated documentation files (the "Software"), to deal in 
the Software without restriction, including without limitation the rights to use, 
copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the 
Software, and to permit persons to whom the Software is furnished to do so, subject 
to the following conditions:
The above copyright notice and this permission notice shall be included in all 
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE 
OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

How to compile:

%========================================
memory/cache benchmark
		make 
%========================================

How to execute:
./ubench-<CPU TYPE>

e.g., ubench-x64 for Intel and AMD x86 CPUs

This suite of benchmarks are for testing the memory system.
It includes the following performance ubenchmarks for x64, ARM and Xeon Phi:
1) Random access benchmark for DRAM 
	a) random pointer-chasing
	b) on-the-fly random index generation
2) Random access benchmark for cache
3) Sequential read ubenchmark for DRAM and cache
4) Semi-sequential read ubenchmark (to minimize prefetching)
5) Atomic update benchmark

* One thing to note is that all these ubenchmarks for a single core only.
In order to fully utilize all the cores on the entire CPU, declare n idential data structures (where n is the number of cores) and use "OpenMP sections" to run the functions simultaneously on differnet cores.

