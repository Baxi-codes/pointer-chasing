/*
MIT License
Copyright 2020 Jee W. Choi, Marat Dukhan, and Xing Liu
Permission is hereby granted, free of charge, to any person obtaining a copy of 
this software and associated documentation files (the "Software"), to deal in 
the Software without restriction, including without limitation the rights to use, 
copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the 
Software, and to permit persons to whom the Software is furnished to do so, subject 
to the following conditions:
The above copyright notice and this permission notice shall be included in all 
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE 
OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

How to compile:

%========================================
This benchmark uses two independent instructions per thread.
Each instruction executes N/2 FMAs.
%========================================
Compute benchmark
	Single:
		make compute TYPE=float
	Double:
		make compute TYPE=double
%========================================


%========================================
N threads copies n pieces of data each in strides of N.
Each data is float4.
%========================================
Bandwidth benchmark
	make bandwidthIlp TYPE=float4
%========================================


%========================================
	It computes a sequence of FMA's over
each word of data loaded to match the 
input intensity I.
%========================================
Intensity benchmark
	Single:
		make intensity TYPE=float
	Double:
		make intensity TYPE=double
%========================================


%========================================
	This benchmark tests the L1 cache
bandwidth for Fermi GPUs.
	This benchmark uses a simple pointer chaser 
to implement the memory reads to minimize 
redundant computation.
%========================================
Cache benchmark
	make cachetest
%========================================


%========================================
	This benchmark tests the shared memory
bandwidth for NVIDIA GPUs.
	This benchmark uses a simple pointer chaser 
to implement the memory reads to minimize 
redundant computation.
%========================================
Shared memory benchmark
	make smtest
%========================================


%========================================
	This benchmark tests the random memory
access performance.
	This benchmark uses a random pointer chaser 
to implement the memory reads.
%========================================
Shared memory benchmark
	make gpurand 
%========================================
